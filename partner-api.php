<?php
/*
Plugin Name: Integration Plugin for Pagely Resellers
Plugin URI: https://docs-api.pagely.com/reseller-plugin/
Description: For Pagely Resellers
Version: 3.3
Author: joshua.strebel Pagely
Author URI: https://pagely.com

*/
// Copyright (c) 2009-2014 Obu Web Technologies Inc., Joshua Strebel
//
// Obu Web Technologies: http://obuweb.com
// DBA: Page.ly WordPress Hosting: https://pagely.com
// Joshua Strebel: http://saint-rebel.com Twitter: @strebel

// Released under the GPL license
// http://www.opensource.org/licenses/gpl-license.php
//
// This is an add-on for WordPress
// http://wordpress.org/
//
// **********************************************************************
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU General Public License for more details.
// **********************************************************************



/*
#PRE INSTALL

You should have signed up at https://photon.pagely.com and have been given API keys.
There you will also setup your plans, products, and what not.

#INSTALL STEP 1

ADD API SECRET constant to wp-config
define('PAGELY_PARTNER_API_SECRET','xxxxxxxx......xxxxx');


#INSTALL STEP 2

ADD code to page template to render out the form
<!-- Pagely order form -->
<?php pagely_order_form($post->post_name) ?>
<!-- Pagely order form -->

#INSTALL STEP 3

Active this plugin
Vist the options page for this plugin.. fill in API KEY field, save and refresh.
It will pull down your plans and such from the API

THERE IS NO STEP 4, DO NOT EDIT THIS FILE

*/

// some constants
if (!defined('WP_INCLUDE_DIR')) {
	define('WP_INCLUDE_DIR', preg_replace('/wp-content$/', 'wp-includes', WP_CONTENT_DIR)); // the wp-includes filepath
}
if (!defined('PP_PLUGIN_ASSETS')) {
	define('PP_PLUGIN_ASSETS', plugins_url( '' , __FILE__ ) ); // the url to our plugins assets
}
if (!defined('PP_PLUGIN_ASSETS_PATH')) {
	define('PP_PLUGIN_ASSETS_PATH', plugin_dir_path( __FILE__ ) ); // the file path to our plugins assets
}

// require some helper public functions
require_once(PP_PLUGIN_ASSETS_PATH."/inc/helpers.php");

/***********************
* Main Pagely API CLASS
***********************/
class PagelyApi {

	var $ver ='p3.3.0';
	var $pagely_api_sec = '';
	var $bypass_pagely_varnish  = true;   // if running on page.ly, need to bypass varnish
	var $live_endpoint     = 'https://api.pagely.com/v1';
	var $sandbox_endpoint    = 'https://sandbox-api.pagely.com/v1';
	var $pp_portal_url;
	var $live_pp_portal_url   = 'https://atomic.pagely.com';
	var $sandbox_pp_portal_url  = 'https://sandbox-atomic.pagely.com';
	var $locale;
	var $page_slug;
	var $options_page;
	var $cookie_holder;

	public function __construct() {
		// GLOBALS
		global $wp_rewrite,$wp_version;

		//return from hosted payment page
		add_action('send_headers',array($this, '_process_payment_response'), 1);

		// load secret key
		if (PAGELY_PARTNER_API_SECRET  != '') {
			$this->pagely_api_sec =  PAGELY_PARTNER_API_SECRET;
		} else {
			echo "Missing API SECRET. ADD API SECRET constant to wp-config.php: define('PAGELY_PARTNER_API_SECRET','xxxxxxxx......xxxxx');";
			return;
		}

		if ( $this->_is_sandbox() ) {
			$this->api_endpoint   = $this->sandbox_endpoint;
			$this->pp_portal_url  = $this->sandbox_pp_portal_url;

		} else {
			$this->api_endpoint   = $this->live_endpoint;
			$this->pp_portal_url  = $this->live_pp_portal_url;
		}


		// IF ROLE ADMIN
		if ( current_user_can('administrator') ) {
			// only add the options page if role is admin
			add_action( 'admin_menu', array('PagelyAPIOptions', '_create_menu') ,20);

		}


		// after wp has fully loaded, enqueue scripts on only the correct page(s)
		add_action( 'wp_enqueue_scripts',array($this, '_load_scripts_head'),1);
		add_action( 'wp_enqueue_scripts',array($this, '_head_styles'),1);


		// these are ajax handlers
		add_action( 'wp_ajax_pagely_jax_formvalidate_callback', array($this,'_pagely_jax_formvalidate_callback') );
		add_action( 'wp_ajax_nopriv_pagely_jax_formvalidate_callback', array($this,'_pagely_jax_formvalidate_callback') );

		add_action( 'wp_ajax_pagely_jax_accformsubmit_callback', array($this,'_pagely_jax_accformsubmit_callback') );
		add_action( 'wp_ajax_nopriv_pagely_jax_accformsubmit_callback', array($this,'_pagely_jax_accformsubmit_callback') );

		add_action( 'wp_ajax_pagely_jax_accenroll_callback', array($this,'_pagely_jax_accenroll_callback') );
		add_action( 'wp_ajax_nopriv_pagely_jax_accenroll_callback', array($this,'_pagely_jax_accenroll_callback') );

		add_action( 'wp_ajax_pagely_jax_generic_callback', array($this,'_pagely_jax_generic_callback') );
		add_action( 'wp_ajax_nopriv_pagely_jax_generic_callback', array($this,'_pagely_jax_generic_callback') );

		return;

	}


	public static function init() {
		static $instance = false;
		if ( !$instance ) {
			$instance = new PagelyApi;

		}
		return $instance;

	}


	public function _load_scripts_head() {
		global $post;

		if ($post->post_name == get_option('pp-signup-slug')) {

			// Register .js assets
			$api_val = plugins_url( 'assets/js/jquery.validate.min.js', __FILE__ );
			$api_js = plugins_url( 'assets/js/pp-api.js', __FILE__ );
			$api_options = plugins_url( 'assets/js/pp-options.js', __FILE__ );
			//$api_cookie = plugins_url( 'assets/js/jquery.cookie.js', __FILE__ );
			wp_deregister_script( 'jquery-validate' );
			wp_register_script( 'jquery-validate', $api_val , 'jquery',$this->ver);
			wp_register_script( 'pp-form-js', $api_js, 'jquery',$this->ver);
			wp_register_script( 'pp-options', $api_options, 'jquery',$this->ver);
			//wp_register_script( 'jquery-cookie', $api_cookie, 'jquery',$this->ver);
			wp_enqueue_script( 'jquery' );
			wp_enqueue_script( 'jquery-form' );
			wp_enqueue_script( 'jquery-validate' );
			//wp_enqueue_script( 'jquery-cookie' );
			wp_enqueue_script( 'pp-form-js' );
			wp_enqueue_script( 'pp-options' );

			// declare the URL to the file that handles the AJAX request (wp-admin/admin-ajax.php)
			// we localize the script to define our own .js namespace "pagelyJax"
			wp_localize_script( 'pp-form-js', 'pagelyJax', array(
					'ajaxurl' => admin_url( 'admin-ajax.php' ),
					'ppjaxnounce' => wp_create_nonce( 'pp_ajax_nonce' ),
					'pp_portal_url' => $this->pp_portal_url,
					'all_plans' => json_encode($this->_get_plans()),
				)
			);
		}
	}

	// render admin head styles
	public function _head_styles() {
		global $post;

		if ($post->post_name == get_option('pp-signup-slug')) {
			$api_css = plugins_url( 'assets/css/pp-form.css', __FILE__ );
			wp_register_style( 'pp-form', $api_css );
			wp_enqueue_style( 'pp-form' );

			wp_register_style( 'font-awesome', 'https://netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css' );
			wp_enqueue_style( 'font-awesome' );
		}
		// no styles to load at this time
	}


	// process the response when returned from hosted payment page
	function _process_payment_response() {

		if ( isset($_POST['pagely_response']) ) {

			$payment_response = json_decode(stripslashes($_POST['pagely_response']));
			
			$account = $this->_get_account($payment_response->p_act);

			if (!$account) {
				// no account by that id, fail
				$array = array(
					'error' => 'no account',
					'billing_info_success' => $payment_response->p_p,
				);
			} else {

				$array = array(
					'billing_info_success' => $payment_response->p_p,
				);


			}

			return json_encode($array);
		}
	}



	/************
	* RENDERS THE ORDER FORM
	*************/
	public function _render_pagely_order_form( $page_slug ) {

		// keep the track of which page the form is on
		update_option('pp-signup-slug',$page_slug);

		// our _get_view public function loads an html snippet
		echo $this->_get_view(PP_PLUGIN_ASSETS_PATH . 'views/order-form.php' );
	}



	/***************
 	* PAGELY API CALLS
 	***************/

	/*
	* Get the plans available for sale, based on this reseller api_key
	* Caches locally for 1 day
	* Sends a GET request to the /bill_plans/all endpoint to get reseller plans
	* @params int $limit How many plans to retrieve (max 25)
	* @params int $offset what offset
 	* @return array|object Array containing 'headers', 'body', 'response', 'cookies', 'filename'. A WP_Error instance upon error
 	* @return[body] returned will be a json response, see our API docs
	*/
	public function _get_reseller_plans($limit = 25,$offset = 0) {

		$pagely_options = get_option('pp_api');
		//wp_options.name
		$key = 'pp_plans';
		$reseller_plans = get_option($key);

		if (!$reseller_plans) {

			$reseller_plans = $this->_pagely_api_request($method = 'GET','/bill_plans/all', $params = array(
					'limit' => $limit,
					'offset' => $offset,
					'active' => 1,
					'v2' => 1,
					'reseller_id' => $pagely_options['reseller_id']
				)
			);


			update_option($key, $reseller_plans);

		}

		return json_decode($reseller_plans);
	}

	// get a single plan, $plan_id, un cached
	public function _get_plan($plan_id) {
		$plan = $this->_pagely_api_request($method = 'GET','/bill_plans/single', $params = array(
				'id'=> $plan_id
			)
		);
		//print_r($plan) ;
		return json_decode($plan);
	}

	// get a single product, $plan_id, un cached
	public function _get_product($product_id) {
		$product = $this->_pagely_api_request($method = 'GET','/bill_products/single', $params = array(
				'id'=> $product_id
			)
		);
		return json_decode($product);
	}

	// get a account,
	public function _get_account($account_id) {
		$account = $this->_pagely_api_request($method = 'GET','/accounts/single', $params = array(
				'id'=> $account_id
			)
		);
		return json_decode($account);
	}

	/*
	* Get the products available for sale, based on this reseller api_key
	* Caches locally for 1 day
	* Sends a GET request to the /bill_products/all endpoint to get products
	* @params int $limit How many plans to retrieve (max 25)
	* @params int $offset what offset
 	* @return array|object Array containing 'headers', 'body', 'response', 'cookies', 'filename'. A WP_Error instance upon error
 	* @return[body] returned will be a json response, see our API docs
	*/
	public function _get_reseller_products($limit = 10,$offset = 0) {

		$pagely_options = get_option('pp_api');

		//wp_options.name
		$key = 'pp_products';

		$reseller_products = get_option($key);

		// get the transient
		if (!$reseller_products) {
			$reseller_products = $this->_pagely_api_request($method = 'GET','/bill_products/all', $params = array(
					'limit' => $limit,
					'offset' => $offset,
					'reseller_id' => $pagely_options['reseller_id']
				)
			);

			update_option($key, $reseller_products);

		}
		return json_decode($reseller_products);
	}



	/*
	* AJAX form remote field validation
	* Sends a GET request to the endpoints validate some fields
 	* @return array|object Array containing 'headers', 'body', 'response', 'cookies', 'filename'. A WP_Error instance upon error
 	* @return[body] returned will be a json response, see our API docs
	*/
	public function _pagely_jax_formvalidate_callback() {
		header( "Content-Type: application/json" );

		$field = sanitize_text_field($_POST['field']);
		// check to see if the submitted nonce matches with the generated nonce we created earlier
		// check nounce on submission
		check_ajax_referer( 'pp_ajax_nonce', 'security' );

		switch($field) {
		case 'pagely_order[domain]':
			$uri = "/domains/validate";
			$params = array('domain' => strtolower(str_replace(array('http://','https://'),'',sanitize_text_field($_POST['value'])) ));

			break;
		case 'pagely_order[email]':
			$uri = "/accounts/validate";
			$params = array('email' => sanitize_text_field($_POST['value']) );
			break;
		}


		$json = $this->_pagely_api_request($method = 'GET',$uri, $params );
		//$this->_pagely_set_cookie_in_head();
		// generate the response
		echo $json;
		die();
	}

	/*
	* AJAX form submission from front end
	* Sends a PUT request to the /subscroptions/single endpoint to new sub for account
 	* @return array|object Array containing 'headers', 'body', 'response', 'cookies', 'filename'. A WP_Error instance upon error
 	* @return[body] returned will be a json response, see our API docs
	*/
	public function _pagely_jax_accenroll_callback() {
		header( "Content-Type: application/json" );
		$form =  $_POST['pagely_enroll'];
		foreach ($form as $k => $v) {
			$form[$k] = trim( sanitize_text_field($v) );
		}

		check_ajax_referer( 'pp_ajax_nonce', 'security' );

		$resp =  json_encode($this->_send_new_subscription($form));

		echo $resp;
		die(); // this is required to return a proper result
	}
	/*
	* AJAX form submission from front end
	* Sends a PUT request to the /accouts/single endpoint to register a new account
 	* @return array|object Array containing 'headers', 'body', 'response', 'cookies', 'filename'. A WP_Error instance upon error
 	* @return[body] returned will be a json response, see our API docs
	*/
	public function _pagely_jax_accformsubmit_callback() {

		// we did the form validation client side, so lets call this input good for now and save it to the session.
		header( "Content-Type: application/json" );
		$form =  $_POST['pagely_order'];
		foreach ($form as $k => $v) {
			$form[$k] = trim( sanitize_text_field($v) );
		}

		check_ajax_referer( 'pp_ajax_nonce', 'security' );

		$resp =  json_encode($this->_send_account_data($form));

		echo $resp;
		die(); // this is required to return a proper result

	}

	// send the previously saved data from the session, to the api
	public function _send_account_data($form = false) {

		//if (!$form) {
		// $form = $this->_get_pp_cookie('acc_form_post');
		//}
		foreach ($form as $k => $v) {
			$form[$k] = trim( sanitize_text_field($v) );
		}
		// lets add their plan choice to the session

		// never trust user input, rebuild the post array before sending.
		$form['first_name'] = isset($form['first_name']) ? $form['first_name'] : '';
		$form['last_name'] = isset($form['last_name']) ? $form['last_name'] : '';

		$params['name']   = $form['first_name'] .' '. $form['last_name'];
		$params['username']  = isset($form['email']) ? $form['email'] : '';
		$params['company_name'] = isset($form['company_name']) ? $form['company_name'] : '';
		$params['email']   = isset($form['email']) ? $form['email'] : '';
		$params['phone']   = isset($form['mobile']) ? $form['mobile'] : '';
		$params['twitter']  = isset($form['twitter']) ? $form['twitter'] : '';
		$params['affiliate_code']  = isset($form['affiliate_code']) ? $form['affiliate_code'] : '';
		$params['auth_q']    = isset($form['squestion']) ? $form['squestion'] : '';
		$params['auth_q_answer'] = isset($form['sanswer']) ? $form['sanswer'] : '';



		//print_r($params);
		$uri = '/accounts/single';
		$json = $this->_pagely_api_request($method = 'PUT',$uri, $params );
		//print_r($json);
		if (!json_decode($json)) {
			// was not a json response...make one
			$res = new stdClass();
			$res->message = $json;
			$json = json_encode($res);
			return false;
		}

		// let work on the response

		$result = json_decode($json);
		//print_r($result);
		if ($result->result == 2) {

			$cookie = array(
				'plan_id' => $form['plan'],
				'promo_code' => $form['promo_code'],
				'act_id'  => $result->object->id,
				'act_name'  => $result->object->name,
			);

			$return = new stdClass();
			$return->result  = 2;
			$return->message  = "Redirecting to payment page...";
			$return->hosted_billing_page = $result->object->hosted_billing_page;
			$return->cookie = $cookie;
			unset($result);


			return $return;
		}

		return $result;

	}

	function _send_new_subscription($form) {

		foreach ($form as $k => $v) {
			$form[$k] = trim( sanitize_text_field($v) );
		}

		$params['plan_id']   = isset($form['plan_id']) ? $form['plan_id'] : '';
		$params['account_id'] = isset($form['account_id']) ? $form['account_id'] : '';
		$params['cycle']   = isset($form['cycle']) ? $form['cycle'] : 'mm';
		$params['promo_code']   = isset($form['promo_code']) ? $form['promo_code'] : '';

		$uri = '/account_subscriptions/single';
		$json = $this->_pagely_api_request($method = 'PUT',$uri, $params );
		if (!json_decode($json)) {
			// was not a json response...make one
			$res = new stdClass();
			$res->message = $json;
			$json = json_encode($res);
			return false;
		}

		// lets work on the response

		$result = json_decode($json);
		//print_r($result);
		if ($result->result == 2) {
			// success
			$act = $this->_get_account($result->object->account_id);
			$return = new stdClass();
			$return->result  = 2;
			$return->message  = "Subscription Created";
			$return->atomic_login = $this->pp_portal_url.'/go/login';
			$return->atomic_username = $act->username;
			usleep(500);
			// get a token
			$params['account_id'] = $act->id;
			$uri = '/accounts/token';
			$json = $this->_pagely_api_request($method = 'PUT',$uri, $params );
			$token = json_decode($json);

			// assign token to response
			if (isset($token->token)) {
				$return->atomic_one_time_use_token = $token->token;
			}
			unset($result);
			return $return;
			// show a message and auto log them in to atomic
		} else if ($result->result == 3 && $result->message == "New Plan subscription has been created, with errors.") {

				$return = new stdClass();
				$return->result  = 3;
				$return->message  = "Subscription Created w/ Errors.";
				unset($result);
				return $return;
			} else {
			return false;
		}

	}


	/*
	* AJAX form submission from front end
	* Just reads the $_post data to take action on
 	* @return array|object Array containing 'headers', 'body', 'response', 'cookies', 'filename'. A WP_Error instance upon error
 	* @return[body] returned will be a json response, see our API docs
	*/
	public function _pagely_jax_generic_callback() {
		check_ajax_referer( 'pp_ajax_nonce', 'security' );
		$posted = $_POST;
	
		foreach ($posted as $k => $v) {
			if (is_array($v)) {
				foreach ($v as $kk => $vv) {
					$v[$kk] =  trim( sanitize_text_field($vv) );
				}
			} else {
				$posted[$k] = trim( sanitize_text_field($v) );
			}
		}

		switch ($posted['ppdo']) {
		case 'clear_cookie':
			$this->_clear_pp_cookie();
			break;
		case 'get_cookie':
			echo json_encode($this->_get_pp_cookie());
			break;
		case 'load_legal':
			$name = $posted['name'];
			switch ($name) {
			case 'tos':
				$url = 'https://pagely.com/terms-of-service/';
				break;
			case 'aup':
				$url = 'https://pagely.com/acceptable-use-policy/';
				break;
			case 'privacy':
				$url = 'https://pagely.com/privacy-policy/';
				break;

			}
			echo $this->load_legal($url);

		case 'set_cookie':
			$value = json_decode(stripcslashes($posted['value']));
			$this->_set_pp_cookie($value);
			//print_r($value);
			echo true;
			break;
		case 'load_view':
			$which_view = $posted['view'];
			echo $this->_get_view( PP_PLUGIN_ASSETS_PATH . 'views/'.$which_view.'.php');
			break;
		case 'get_account':
			$account_id = $posted['act_id'];
			echo _get_account($account_id);
			break;
		}
		die();
	}


	/*
	* Test API
 	* @return array|object Array containing 'headers', 'body', 'response', 'cookies', 'filename'. A WP_Error instance upon error
 	* @return[body] returned will be a json response, see our API docs
	*/

	public function _test_api() {

		$params = array();

		$uri = '/go/hello';
		$json = $this->_pagely_api_request($method = 'GET',$uri, $params );
		if (!$json) {
			return false;
		}
		if (!json_decode($json)) {
			// was not a json response...make one
			$res->message = $json;
			$json = json_encode($res);
			return false;
		}

		$result = json_decode($json);
		if (isset($result->result) && $result->result == 2) {
			// api works
			return true;
		} else {
			return false;
		}

	}

	/***************************
	* WRAPPER public function FOR ALL PAGELY API REQUESTS
	* This public function makes a remote request to the Pagely REST API
	* @param string $method GET | POST | PUT | DELETE
	* @param string $uri the controller and method to call on teh api
	* @param array $params required data for method
 	* @return array|object Array containing 'headers', 'body', 'response', 'cookies', 'filename'. A WP_Error instance upon error
 	* @return[body] returned will be a json response, see our API docs
	*/
	public function _pagely_api_request($method = 'GET', $uri = '/controller/method', $params = array() ) {

		// setup the request
		$url   = $this->api_endpoint . $uri;

		$client_ip = '';
		if ( isset($_SERVER['REMOTE_ADDR']) && "" != $_SERVER['REMOTE_ADDR'] ) {
			$client_ip = $_SERVER['REMOTE_ADDR'];
		} elseif (isset($_SERVER['HTTP_X_FORWARDED_FOR']) ) {
			$client_ip = $_SERVER['HTTP_X_FORWARDED_FOR'];
		} else {
			$client_ip = $_SERVER['SERVER_ADDR'];
		}

		$headers = array( 'X-API-KEY' => $this->_api_key(),'X-FROM-IP' => $client_ip);

		// switch based on METHOD
		/***********
		// GET is for getting reecords
		// POST is for updating existing records and requires an ID
		// PUT is for create NEW records
		// DELETE is for removing records and requires an ID
		************/

		switch ($method) {
		case 'GET':
			$params['sess']  = ''; //not used yet
			$querystring    =  http_build_query($params);
			// append a query string to the url
			$url       = $url.'?'.$querystring;
			// unset params on GET
			$params      = false;
			break;
		case 'POST':
		case 'PUT':
		case 'DELETE':
			// generate some secure hashes
			$time            = date('U');
			$params['sess']  = ''; //not used yet
			$params['time']     = $time;
			$params['hash']     = sha1($time.$this->pagely_api_sec); // not used yet
			// pass an object ID as needed
			$params['id']   = isset($params['id']) ? $params['id'] : ''; // should be object id, like domain_id = 1099; can be empty on PUT
			break;
		}

		// make the request
		$req_args = array(
			'timeout' => 10,
			'method' => $method,
			'body' => $params,
			'headers' => $headers,
			'sslverify' => true  // set to true in live envrio
		);

		// make the remote request
		$result = wp_safe_remote_request( $url, $req_args);

		// handle response
		if ( !is_wp_error($result) ) {
			//no error

			return $result['body'];


		} else {
			// error
			return $result->get_error_message();
		}
	}


	/************
	* 	MISC public functionS
	*************/
	// send an email to support
	// dont think we use this
	public function _support_email($to,$from,$subject,$msg) {
		wp_mail( $to, $subject, $message);
	}

	// support site
	public function _supportsite() {
		// get option
		$key = 'support_url';
		$api_options = get_option('pp_api');
		return $api_options[$key];
	}



	// These are the 3 plan id's the user selected on the options page
	public function _get_plans_to_show() {
		$key = 'plans_to_show';
		$api_options = get_option('pp_api');
		if (isset($api_options[$key])) {
			return $api_options[$key];
		}
		return false;
	}

	// These are the product id's the user selected on the options page
	public function _get_products_to_show() {
		$key = 'products_to_show';
		$api_options = get_option('pp_api');
		if (isset($api_options[$key])) {
			return $api_options[$key];
		}
		return false;
	}

	// makes a remote call to load current legal info from Pagely, strips out the header, and footer and returns the body.
	function load_legal($url) {

		// make the remote request
		$result = wp_safe_remote_get( $url, $req_args);
		// handle response
		if ( !is_wp_error($result) ) {
			//no error

			return $result['body'];


		} else {
			// error
			return $result->get_error_message();
		}

	}

	// This public function filters the 3 selected against all plans
	// to return a full plan object for each of the 3
	// we do this way for now so we always get an uncached list before saving locally
	public function _get_plans() {
		$plans = $this->_get_reseller_plans(10,0);
		$plans_to_show = $this->_get_plans_to_show();

		$api_options = get_option('pp_api');
		$order_by = $api_options['order_by']; // 0 is price: low to high, 1 is price: high to low


		$return_plans = array();
		if (!is_array($plans_to_show)) {
			return $return_plans;
		}
		// check short list against master list
		if ($plans->result == 2 && count($plans->objects) > 0 ) {
			foreach ($plans->objects as $p) {
				if ( in_array($p->id,$plans_to_show) ) {
					$return_plans['plans'][] = $p;
				}
			}
		}
		// sort
		if ($order_by == 0) {
			// sort by $p->price, low to high
			usort($return_plans['plans'], array($this,  "_sort_plans_asc"));

		} else if ($order_by == 1) {
				// sort by $p->price, high to low

				usort($return_plans['plans'], array($this,  "_sort_plans_desc"));

			}

		// add the default plan
		$return_plans['default'] = $plans_to_show['plan_default'];

		// return selected plans
		if (count($return_plans) > 0) {
			return $return_plans;
		} else {
			return false;
		}
	}


	// sort array of objects
	public function _sort_plans_asc($a, $b) {
		$al = $a->price;
		$bl = $b->price;
		if ($al == $bl) {
			return 0;
		}
		return ($al > $bl) ? +1 : -1;
	}

	// sort array of objects
	public function _sort_plans_desc($a, $b) {
		$al = $a->price;
		$bl = $b->price;
		if ($al == $bl) {
			return 0;
		}
		return ($al > $bl) ? -1 : +1;
	}

	// This public function filters the selected products against all products
	// to return a full product object for each
	public function _get_products() {
		$products = $this->_get_reseller_products(10,0);
		//print_r($products);
		$products_to_show = $this->_get_products_to_show();

		$api_options = get_option('pp_api');
		$order_by = $api_options['order_by']; // 0 is price: low to high, 1 is price: high to low

		if (!$products_to_show) {
			return false;
		}
		$return_products = array();
		// check short list against master list
		if ($products->result == 2 && count($products->objects) > 0 ) {
			foreach ($products->objects as $p) {
				if ( in_array($p->id,$products_to_show) ) {
					$return_products[] = $p;
				}
			}
		}

		// sort
		if ($order_by == 0) {
			// sort by $p->price, low to high
			usort($return_products, array($this,  "_sort_plans_asc"));

		} else if ($order_by == 1) {
				// sort by $p->price, high to low

				usort($return_products, array($this,  "_sort_plans_desc"));

			}

		// return selected plans
		if (count($return_products) > 0) {
			return $return_products;
		} else {
			return false;
		}
	}


	// some error messages and warning. jquery.dialog //
	// pretty sure we dropped jquery ui
	public function _dialog($msg,$type = 'error') {
		switch ($type) {
		case 'error':
			echo "<div class='error'><p>{$msg}</p></div>";
			break;
		case 'notice':
			echo "<div id='message' class='updated'><p>{$msg}</div>";
			break;
		}
	}

	// Is sandbox mode active?
	public function _is_sandbox() {
		$api_options = get_option('pp_api');
		$sandbox = $api_options['pp_mode'];
		if ($sandbox == 0) {
			return true;
		}
	}

	// return the API key from database
	// api key is saved in the options table. You need 2 keys.
	public function _api_key() {
		$api_options = get_option('pp_api');
		return $api_key = $api_options['api_key'];
	}

	//are signups on?
	public function _signups_on() {
		$api_options = get_option('pp_api');
		$allow_signups = $api_options['signups_active'];
		if ($allow_signups == 1) {
			return true;
		} else {
			return false;
		}
	}

	//are signups on?
	public function _get_trial_length() {
		$api_options = get_option('pp_api');
		$free_trial_days = $api_options['free_trial_days'];
		if ($free_trial_days > 0) {
			return $free_trial_days;
		} else {
			return false;
		}
	}

	// format cash as USD
	public function _cash($amt,$short = false) {
		// we want to return json of the cart items
		$cash = money_format('%!i', $amt);
		if ($short) {
			if (substr($cash,-2) == "00") {
				$cash = substr($cash,0,-3);
			}
		}
		$sym = "$";
		return "<span class='currency'><sup>{$sym}</sup><strong>".$cash."</strong></span>";

	}

	// This is the header so Pagely varnish will not cache pages.
	public function _set_response_header() {
		if ($this->bypass_pagely_varnish) {
			header("X-No-Cache: true");
		}
	}

	// get custom css
	public function _custom_css() {
		$api_options = get_option('pp_api');
		return $api_options['custom_css'];
	}


	/**********
	* loads a view file, should be last public function of class
	**********/
	public function _get_view($filename) {
		if (is_file($filename)) {
			ob_start();
			include $filename;
			$file = ob_get_contents();
			ob_get_clean();
			return $file;
		}
		// return
		return false;
	}

} # end API Class

// load the plugin
add_action( 'init', array( 'PagelyApi', 'init' ),1);
//$PagelyApi = new PagelyApi;
// no closing php tag
require_once(PP_PLUGIN_ASSETS_PATH."/inc/options_page.php");
